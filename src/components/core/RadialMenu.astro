---
// This component creates a floating button that expands into a radial menu when clicked
import { AstroCarousel } from "@/components/ui/astro-carousel";

// Replace the content with actual navigation links
const slides = [
  { 
    content: (
      `<div class="menu-section">
        <ul class="menu-list">
          <li><a href="/wellness" class="menu-link">Wellness</a></li>
          <li><a href="/wellness/reformer-classes" class="menu-link">Pilates</a></li>
          <li><a href="/wellness/reformer-1-1" class="menu-link">Reformer 1:1</a></li>
          <li><a href="/wellness/personal-training" class="menu-link">Training 1:1</a></li>
          <li><a href="/wellness/personal-training/transform" class="menu-link">Transform</a></li>
          <li><a href="/wellness/personal-training/heal" class="menu-link">Heal (Rehab)</a></li>
          <li><a href="/wellness/nutrition" class="menu-link">Nutrition</a></li>
        </ul>
      </div>`
    )
  },
  { 
    content: (
      `<div class="menu-section">
        <ul class="menu-list">
          <li><a href="/community" class="menu-link">Community</a></li>
          <li><a href="/community/events" class="menu-link">Events</a></li>
          <li><a href="/community/games" class="menu-link">Games</a></li>
          <li><a href="/community/membership" class="menu-link">Membership</a></li>
        </ul>
      </div>`
    )
  },
  { 
    content: (
      `<div class="menu-section">
        <ul class="menu-list">
          <li><a href="/cafe" class="menu-link">Café</a></li>
          <li><a href="/cafe/halm-coffee" class="menu-link">HALM Coffee</a></li>
          <li><a href="/cafe/drinks" class="menu-link">Drinks</a></li>
          <li><a href="/cafe/food" class="menu-link">Food</a></li>
        </ul>
      </div>`
    )
  },
  { 
    content: (
      `<div class="menu-section">
        <ul class="menu-list">
          <li><a href="/schedule" class="menu-link">Schedule</a></li>
          <li><a href="/wellness/reformer-classes#schedule" class="menu-link">Reformer</a></li>
          <li><a href="/community/events#upcoming" class="menu-link">Events</a></li>
        </ul>
      </div>`
    )
  },
  { 
    content: (
      `<div class="menu-section">
        <ul class="menu-list">
          <li><a href="/collective" class="menu-link">Spaces</a></li>
          <li><a href="/collective/villa" class="menu-link">Villa</a></li>
          <li><a href="/collective/garden" class="menu-link">Garden</a></li>
          <li><a href="/collective/rooftop" class="menu-link">Rooftop</a></li>
          <li><a href="/collective/podcast" class="menu-link">Podcast</a></li>
          <li><a href="/collective/meet" class="menu-link">Meet</a></li>
          <li><a href="/collective/work" class="menu-link">Work</a></li>
        </ul>
      </div>`
    )
  }
];
---

<!-- Darkened overlay -->
<div 
  id="radial-overlay" 
  class="fixed inset-0 bg-black/0 pointer-events-none transition-all duration-300 ease-in-out z-25"
></div>

<!-- Carousel Container -->
<div 
  id="radial-carousel" 
  class="fixed inset-x-0 top-1/2 -translate-y-1/2 w-full h-[70vh] z-30 opacity-0 pointer-events-none transition-all duration-300 ease-in-out"
>
  <AstroCarousel slides={slides} id="menu-carousel" client:visible />
</div>

<!-- Floating Button Container -->
<div class="fixed bottom-8 left-0 right-0 flex justify-center z-40 transition-all duration-300 ease-in-out" id="radial-menu-container">
  <button 
    id="radial-menu-toggle"
    class="rounded-full bg-[#e0d6d477] p-5 transition-all duration-300 ease-in-out hover:scale-105 focus:outline-none backdrop-blur-xs z-50"
    aria-label="Open menu"
  >
    <!-- Default Menu Icon (H) -->
    <svg 
      id="default-icon"
      class="w-9 transition-all duration-300 ease-in-out"
      width="48" 
      height="36" 
      viewBox="0 0 231 171" 
      fill="#fff" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M0 0H231V45H142V67H200V104H142V127H231V171H0V127H88V104H31V67H88V45H0V0Z" />
    </svg>
    
    <!-- Pointer Icon (for open state) - Initially hidden -->
    <img 
      id="pointer-icon"
      src="/h-point-outline-2.svg" 
      alt="Menu pointer"
      class="w-[87.5%] transition-all duration-300 ease-in-out absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-[42%] opacity-0 rotate-180"
    />
  </button>
  
  <!-- Radial Menu Items -->
  <div class="radial-menu">
    <button class="radial-menu-item item-1 nord-font ml-1.5">WELLNESS</button>
    <button class="radial-menu-item item-2 nord-font">COMMUNITY</button>
    <button class="radial-menu-item item-3 nord-font">CAFÉ</button>
    <button class="radial-menu-item item-4 nord-font">SCHEDULE</button>
    <button class="radial-menu-item item-5 nord-font pr-3">SPACES</button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('radial-menu-toggle');
    const radialOverlay = document.getElementById('radial-overlay');
    const menuItems = document.querySelectorAll('.radial-menu-item');
    const defaultIcon = document.getElementById('default-icon');
    const pointerIcon = document.getElementById('pointer-icon');
    const radialCarousel = document.getElementById('radial-carousel');
    
    let isMenuOpen = false;
    let currentCarouselCategory = null;
    let currentSlideIndex = 0;
    
    // Function to toggle menu state
    function toggleMenu() {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Open menu
        menuToggle.classList.add('active');
        
        // Show the overlay with blur
        radialOverlay.classList.remove('pointer-events-none', 'bg-black/0');
        radialOverlay.classList.add('backdrop-blur-sm', 'bg-black/50');
        
        // Switch to pointer icon
        defaultIcon.classList.add('opacity-0');
        pointerIcon.classList.remove('opacity-0');
        pointerIcon.classList.add('opacity-80');
        
        // Animate menu items out with initial delay
        menuItems.forEach(item => {
          // Reset transition delay to original values
          item.style.transitionDelay = '';
          item.classList.add('expanded');
        });
      } else {
        // Close menu
        menuToggle.classList.remove('active');
        
        // Hide overlay
        radialOverlay.classList.remove('backdrop-blur-sm', 'bg-black/50');
        radialOverlay.classList.add('bg-black/0');
        
        // Switch back to default icon
        defaultIcon.classList.remove('opacity-0');
        pointerIcon.classList.remove('opacity-80');
        pointerIcon.classList.add('opacity-0');
        
        // Reset pointer icon rotation
        if (pointerIcon) {
          pointerIcon.style.transition = 'transform 0.3s ease-in-out';
          pointerIcon.style.transform = ''; // Reset to original state
        }
        
        // Hide carousel if open
        if (radialCarousel) {
          radialCarousel.classList.add('opacity-0', 'pointer-events-none');
          currentCarouselCategory = null;
        }
        
        // First, trigger the reverse animation by changing the transform scale
        // but keep the expanded class for proper animation
        menuItems.forEach(item => {
          // Remove the delay when closing the menu
          item.style.transitionDelay = '0s';
          // Apply the scale(0) transform while keeping expanded class
          item.style.transform = 'translateX(-50%) scale(0)';
          item.style.opacity = '0';
        });
        
        // Then remove expanded class and reset inline styles after animation completes
        setTimeout(() => {
          menuItems.forEach(item => {
            item.classList.remove('expanded');
            // Clear inline styles to let CSS take over again
            setTimeout(() => {
              item.style.transform = '';
              item.style.opacity = '';
            }, 50);
          });
        }, 300); // Match transition duration
        
        // Add pointer-events-none after animation finishes
        setTimeout(() => {
          radialOverlay.classList.add('pointer-events-none');
        }, 300);
      }
    }
    
    // Event listeners
    if (menuToggle) {
      menuToggle.addEventListener('click', toggleMenu);
    }
    
    if (radialOverlay) {
      radialOverlay.addEventListener('click', () => {
        if (isMenuOpen) toggleMenu();
      });
    }
    
    // Track the currently active menu item
    let activeMenuItem = null;
    
    // Function to rotate pointer icon based on menu item
    function rotatePointerToItem(itemNumber) {
      if (!pointerIcon || !isMenuOpen) return;
      
      // Get the angle from CSS variables
      const angleVar = `--angle-item${itemNumber}`;
      let angle = getComputedStyle(document.documentElement)
        .getPropertyValue(angleVar).trim();
      
      // Parse the angle (removing 'deg' if present)
      angle = parseInt(angle);
      
      // Calculate rotation to point the icon toward the item
      let rotationAngle = angle - 270;
      
      // Apply specific offsets for items that need adjustment
      if (itemNumber === 1) rotationAngle -= 30; // Adjust item 1 pointing
      if (itemNumber === 5) rotationAngle += 30; // Adjust item 5 pointing
      
      return rotationAngle;
    }
    
    // Function to interpolate between two values
    function lerp(start, end, factor) {
      return start + (end - start) * factor;
    }
    
    // Function to animate menu based on scroll progress
    function animateMenuOnScroll(slidePosition) {
      if (!isMenuOpen) return;
      
      // Calculate the current and next slide indexes
      const currentIndex = Math.floor(slidePosition);
      const nextIndex = Math.min(currentIndex + 1, menuItems.length - 1);
      
      // Calculate the progress between the current and next slide (0-1)
      const progress = slidePosition - currentIndex;
      
      // Set active states for menu items but without opacity transitions
      menuItems.forEach((item, i) => {
        if (i === currentIndex || (i === nextIndex && progress > 0)) {
          item.classList.add('item-active');
        } else {
          item.classList.remove('item-active');
        }
      });
      
      // Get rotation angles for current and next items
      const currentRotation = rotatePointerToItem(currentIndex + 1);
      const nextRotation = rotatePointerToItem(nextIndex + 1);
      
      // Interpolate between the rotation angles
      if (currentRotation !== undefined && nextRotation !== undefined) {
        const interpolatedRotation = lerp(currentRotation, nextRotation, progress);
        
        // Apply rotation to pointer icon
        pointerIcon.style.transition = progress === 0 || progress === 1 ? 'transform 0.3s ease-in-out' : 'none';
        pointerIcon.style.transform = `rotate(${interpolatedRotation}deg)`;
      }
    }
    
    // Listen for scroll progress updates from the carousel
    window.addEventListener('carousel-scroll-progress', (e) => {
      const { slidePosition } = e.detail;
      animateMenuOnScroll(slidePosition);
    });

    // Update event handlers for menu items
    if (pointerIcon) {
      menuItems.forEach((item, index) => {
        // Handle hover/tap on menu items to rotate the icon
        const activateItem = () => {
          if (!isMenuOpen) return;
          
          // Remove active class from previous active item
          if (activeMenuItem) {
            activeMenuItem.classList.remove('item-active');
          }
          
          // Set this as the new active item
          activeMenuItem = item;
          item.classList.add('item-active');
          
          // Apply rotation using the common function
          const rotationAngle = rotatePointerToItem(index + 1);
          if (rotationAngle !== undefined) {
            pointerIcon.style.transition = 'transform 0.3s ease-in-out';
            pointerIcon.style.transform = `rotate(${rotationAngle}deg)`;
          }
          
          // Get the category from the item text
          const category = item.textContent.trim().toLowerCase();
          
          // Show the carousel with the specific content
          showCarousel(category, index);
        };
        
        // Add mouseenter event for desktop users
        item.addEventListener('mouseenter', activateItem);
        
        // Add tap/click event (just activate, don't close menu)
        item.addEventListener('click', (e) => {
          e.preventDefault();
          activateItem();
          // Note: We're not closing the menu on tap anymore
        });
      });
    }
    
    // Function to show carousel with specific content
    function showCarousel(category, slideIndex) {
      if (!radialCarousel) return;
      
      // Only proceed if this is a new category or carousel is hidden
      if (category !== currentCarouselCategory || radialCarousel.classList.contains('opacity-0')) {
        currentCarouselCategory = category;
        currentSlideIndex = slideIndex;
        
        // Show carousel
        radialCarousel.classList.remove('opacity-0', 'pointer-events-none');
        
        // For React components hydrated with client:visible, we need to use a different approach
        // to control the carousel. We'll dispatch a custom event that the React component can listen for.
        window.dispatchEvent(new CustomEvent('carousel-navigate', { 
          detail: { slideIndex }
        }));
      }
    }
    
    // Update the closing menu logic to only close on main button or overlay
    if (radialOverlay) {
      radialOverlay.addEventListener('click', () => {
        if (isMenuOpen) {
          // Clear active item
          if (activeMenuItem) {
            activeMenuItem.classList.remove('item-active');
            activeMenuItem = null;
          }
          toggleMenu();
        }
      });
    }
    
    // Also handle reset in the toggleMenu function
    const originalToggleMenu = toggleMenu;
    toggleMenu = function() {
      const wasOpen = isMenuOpen;
      originalToggleMenu();
      
      // If menu was open and is now closing, clear active item
      if (wasOpen && !isMenuOpen && activeMenuItem) {
        activeMenuItem.classList.remove('item-active');
        activeMenuItem = null;
      }
    };

    // Add a function to dynamically adjust rotation axis
    function adjustRotationAxis(x, y) {
      document.documentElement.style.setProperty('--button-origin-x', x);
      document.documentElement.style.setProperty('--button-origin-y', y);
    }

    // New function to update menu state based on carousel slide
    function updateMenuFromCarousel(slideIndex) {
      if (!isMenuOpen) return;
      
      // Remove active class from previous item
      if (activeMenuItem) {
        activeMenuItem.classList.remove('item-active');
      }
      
      // Set the new active item based on slide index
      const newActiveMenuItem = menuItems[slideIndex];
      if (newActiveMenuItem) {
        activeMenuItem = newActiveMenuItem;
        activeMenuItem.classList.add('item-active');
        
        // Update pointer icon rotation
        const itemNumber = slideIndex + 1;
        const angleVar = `--angle-item${itemNumber}`;
        let angle = getComputedStyle(document.documentElement)
          .getPropertyValue(angleVar).trim();
        
        // Parse the angle (removing 'deg' if present)
        angle = parseInt(angle);
        
        // Calculate rotation to point the icon toward the item
        let rotationAngle = angle - 270;
        
        // Apply specific offsets for items that need adjustment
        if (itemNumber === 1) rotationAngle -= 30; // Adjust item 1 pointing
        if (itemNumber === 5) rotationAngle += 30; // Adjust item 5 pointing
        
        // Match the 0.3s duration to be the same as the menu item scale duration
        if (pointerIcon) {
          pointerIcon.style.transition = 'transform 0.3s ease-in-out';
          pointerIcon.style.transform = `rotate(${rotationAngle}deg)`;
        }
        
        // Update current category from the menu item text
        currentCarouselCategory = activeMenuItem.textContent.trim().toLowerCase();
        currentSlideIndex = slideIndex;
      }
    }

    // Listen for carousel slide change events
    window.addEventListener('carousel-slide-change', (e) => {
      updateMenuFromCarousel(e.detail.slideIndex);
    });
  });
</script>

<!-- Add React component event listener -->
<script>
  // This script will run in the browser and connect our vanilla JS with the React carousel
  document.addEventListener('DOMContentLoaded', () => {
    // Global variable to store the Embla API once we find it
    let emblaApiInstance = null;
    
    // Function to find the Embla API
    function findEmblaApi() {
      const emblaNodes = document.querySelectorAll('[data-embla-api]');
      for (const node of emblaNodes) {
        if (node.__emblaApi__ && typeof node.__emblaApi__.scrollTo === 'function') {
          return node.__emblaApi__;
        }
      }
      return null;
    }
    
    // Set up the two-way synchronization
    function setupSynchronization() {
      // Try to get the Embla API
      emblaApiInstance = findEmblaApi();
      
      if (!emblaApiInstance) {
        // If we couldn't find it, try again in a moment
        console.log("Embla API not found yet, retrying...");
        setTimeout(setupSynchronization, 200);
        return;
      }
      
      console.log("Embla API found, setting up synchronization");
      
      // Listen for our custom navigation events
      window.addEventListener('carousel-navigate', (e) => {
        if (emblaApiInstance && typeof emblaApiInstance.scrollTo === 'function') {
          emblaApiInstance.scrollTo(e.detail.slideIndex, true);
        }
      });
      
      // Listen for carousel changes
      emblaApiInstance.on('select', () => {
        const slideIndex = emblaApiInstance.selectedScrollSnap();
        console.log("Carousel changed to slide:", slideIndex);
        
        // Dispatch event to update the menu
        window.dispatchEvent(new CustomEvent('carousel-slide-change', {
          detail: { slideIndex }
        }));
      });

      // Listen for scroll progress updates
      emblaApiInstance.on('scroll', () => {
        const scrollProgress = emblaApiInstance.scrollProgress();
        const slidePosition = scrollProgress * (menuItems.length - 1);
        
        // Dispatch event to animate menu based on scroll progress
        window.dispatchEvent(new CustomEvent('carousel-scroll-progress', {
          detail: { slidePosition }
        }));
      });
    }
    
    // Start looking for the Embla API after a delay to allow for hydration
    setTimeout(setupSynchronization, 500);
  });
</script>
