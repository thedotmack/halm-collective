---
// This component creates a floating button that expands into a radial menu when clicked
import { AstroCarousel } from "@/components/ui/astro-carousel";

const slides = [
  { content: "Wellness Content" },
  { content: "Community Content" },
  { content: "Café Content" },
  { content: "Schedule Content" },
  { content: "Spaces Content" }
];
---

<!-- Darkened overlay -->
<div 
  id="radial-overlay" 
  class="fixed inset-0 bg-black/0 pointer-events-none transition-all duration-300 ease-in-out z-25"
></div>

<!-- Carousel Container -->
<div 
  id="radial-carousel" 
  class="fixed inset-x-0 top-1/2 -translate-y-1/2 w-full h-[70vh] z-30 opacity-0 pointer-events-none transition-all duration-300 ease-in-out"
>
  <AstroCarousel slides={slides} id="menu-carousel" client:visible />
</div>

<!-- Floating Button Container -->
<div class="fixed bottom-8 left-0 right-0 flex justify-center z-40 transition-all duration-300 ease-in-out" id="radial-menu-container">
  <button 
    id="radial-menu-toggle"
    class="rounded-full bg-[#e0d6d477] p-5 transition-all duration-300 ease-in-out hover:scale-105 focus:outline-none backdrop-blur-xs z-50"
    aria-label="Open menu"
  >
    <!-- Default Menu Icon (H) -->
    <svg 
      id="default-icon"
      class="w-9 transition-all duration-300 ease-in-out"
      width="48" 
      height="36" 
      viewBox="0 0 231 171" 
      fill="#fff" 
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M0 0H231V45H142V67H200V104H142V127H231V171H0V127H88V104H31V67H88V45H0V0Z" />
    </svg>
    
    <!-- Pointer Icon (for open state) - Initially hidden -->
    <img 
      id="pointer-icon"
      src="/h-point-outline-2.svg" 
      alt="Menu pointer"
      class="w-[87.5%] transition-all duration-300 ease-in-out absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-[42%] opacity-0 rotate-180"
    />
  </button>
  
  <!-- Radial Menu Items -->
  <div class="radial-menu">
    <button class="radial-menu-item item-1 nord-font ml-1.5">WELLNESS</button>
    <button class="radial-menu-item item-2 nord-font">COMMUNITY</button>
    <button class="radial-menu-item item-3 nord-font">CAFÉ</button>
    <button class="radial-menu-item item-4 nord-font">SCHEDULE</button>
    <button class="radial-menu-item item-5 nord-font pr-3">SPACES</button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('radial-menu-toggle');
    const radialOverlay = document.getElementById('radial-overlay');
    const menuItems = document.querySelectorAll('.radial-menu-item');
    const defaultIcon = document.getElementById('default-icon');
    const pointerIcon = document.getElementById('pointer-icon');
    const radialCarousel = document.getElementById('radial-carousel');
    
    let isMenuOpen = false;
    let currentCarouselCategory = null;
    let currentSlideIndex = 0;
    
    // Function to toggle menu state
    function toggleMenu() {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Open menu
        menuToggle.classList.add('active');
        
        // Show the overlay with blur
        radialOverlay.classList.remove('pointer-events-none', 'bg-black/0');
        radialOverlay.classList.add('backdrop-blur-sm', 'bg-black/50');
        
        // Switch to pointer icon
        defaultIcon.classList.add('opacity-0');
        pointerIcon.classList.remove('opacity-0');
        pointerIcon.classList.add('opacity-80');
        
        // Animate menu items out with initial delay
        menuItems.forEach(item => {
          // Reset transition delay to original values
          item.style.transitionDelay = '';
          item.classList.add('expanded');
        });
      } else {
        // Close menu
        menuToggle.classList.remove('active');
        
        // Hide overlay
        radialOverlay.classList.remove('backdrop-blur-sm', 'bg-black/50');
        radialOverlay.classList.add('bg-black/0');
        
        // Switch back to default icon
        defaultIcon.classList.remove('opacity-0');
        pointerIcon.classList.remove('opacity-80');
        pointerIcon.classList.add('opacity-0');
        
        // Reset pointer icon rotation
        if (pointerIcon) {
          pointerIcon.style.transition = 'transform 0.3s ease-in-out';
          pointerIcon.style.transform = ''; // Reset to original state
        }
        
        // Hide carousel if open
        if (radialCarousel) {
          radialCarousel.classList.add('opacity-0', 'pointer-events-none');
          currentCarouselCategory = null;
        }
        
        // First, trigger the reverse animation by changing the transform scale
        // but keep the expanded class for proper animation
        menuItems.forEach(item => {
          // Remove the delay when closing the menu
          item.style.transitionDelay = '0s';
          // Apply the scale(0) transform while keeping expanded class
          item.style.transform = 'translateX(-50%) scale(0)';
          item.style.opacity = '0';
        });
        
        // Then remove expanded class and reset inline styles after animation completes
        setTimeout(() => {
          menuItems.forEach(item => {
            item.classList.remove('expanded');
            // Clear inline styles to let CSS take over again
            setTimeout(() => {
              item.style.transform = '';
              item.style.opacity = '';
            }, 50);
          });
        }, 300); // Match transition duration
        
        // Add pointer-events-none after animation finishes
        setTimeout(() => {
          radialOverlay.classList.add('pointer-events-none');
        }, 300);
      }
    }
    
    // Event listeners
    if (menuToggle) {
      menuToggle.addEventListener('click', toggleMenu);
    }
    
    if (radialOverlay) {
      radialOverlay.addEventListener('click', () => {
        if (isMenuOpen) toggleMenu();
      });
    }
    
    // Track the currently active menu item
    let activeMenuItem = null;
    
    // Update event handlers for menu items
    if (pointerIcon) {
      menuItems.forEach((item, index) => {
        // Handle hover/tap on menu items to rotate the icon
        const activateItem = () => {
          if (!isMenuOpen) return;
          
          // Remove active class from previous active item
          if (activeMenuItem) {
            activeMenuItem.classList.remove('item-active');
          }
          
          // Set this as the new active item
          activeMenuItem = item;
          item.classList.add('item-active');
          
          // Get the angle from CSS variables
          const itemNumber = index + 1;
          const angleVar = `--angle-item${itemNumber}`;
          let angle = getComputedStyle(document.documentElement)
            .getPropertyValue(angleVar).trim();
          
          // Parse the angle (removing 'deg' if present)
          angle = parseInt(angle);
          
          // Calculate rotation to point the icon toward the item
          let rotationAngle = angle - 270;
          
          // Apply specific offsets for items that need adjustment
          if (itemNumber === 1) rotationAngle -= 30; // Adjust item 1 pointing
          if (itemNumber === 5) rotationAngle += 30; // Adjust item 5 pointing
          
          // Match the 0.3s duration to be the same as the menu item scale duration
          pointerIcon.style.transition = 'transform 0.3s ease-in-out';
          pointerIcon.style.transform = `rotate(${rotationAngle}deg)`;
          
          // Get the category from the item text
          const category = item.textContent.trim().toLowerCase();
          
          // Show the carousel with the specific content
          showCarousel(category, itemNumber - 1);
        };
        
        // Add mouseenter event for desktop users
        item.addEventListener('mouseenter', activateItem);
        
        // Add tap/click event (just activate, don't close menu)
        item.addEventListener('click', (e) => {
          e.preventDefault();
          activateItem();
          // Note: We're not closing the menu on tap anymore
        });
      });
    }
    
    // Function to show carousel with specific content
    function showCarousel(category, slideIndex) {
      if (!radialCarousel) return;
      
      // Only proceed if this is a new category or carousel is hidden
      if (category !== currentCarouselCategory || radialCarousel.classList.contains('opacity-0')) {
        currentCarouselCategory = category;
        currentSlideIndex = slideIndex;
        
        // Show carousel
        radialCarousel.classList.remove('opacity-0', 'pointer-events-none');
        
        // For React components hydrated with client:visible, we need to use a different approach
        // to control the carousel. We'll dispatch a custom event that the React component can listen for.
        window.dispatchEvent(new CustomEvent('carousel-navigate', { 
          detail: { slideIndex }
        }));
      }
    }
    
    // Update the closing menu logic to only close on main button or overlay
    if (radialOverlay) {
      radialOverlay.addEventListener('click', () => {
        if (isMenuOpen) {
          // Clear active item
          if (activeMenuItem) {
            activeMenuItem.classList.remove('item-active');
            activeMenuItem = null;
          }
          toggleMenu();
        }
      });
    }
    
    // Also handle reset in the toggleMenu function
    const originalToggleMenu = toggleMenu;
    toggleMenu = function() {
      const wasOpen = isMenuOpen;
      originalToggleMenu();
      
      // If menu was open and is now closing, clear active item
      if (wasOpen && !isMenuOpen && activeMenuItem) {
        activeMenuItem.classList.remove('item-active');
        activeMenuItem = null;
      }
    };

    // Add a function to dynamically adjust rotation axis
    function adjustRotationAxis(x, y) {
      document.documentElement.style.setProperty('--button-origin-x', x);
      document.documentElement.style.setProperty('--button-origin-y', y);
    }
  });
</script>

<!-- Add React component event listener -->
<script>
  // This script will run in the browser and connect our vanilla JS with the React carousel
  document.addEventListener('DOMContentLoaded', () => {
    // Wait for the carousel component to be hydrated
    setTimeout(() => {
      window.addEventListener('carousel-navigate', (e) => {
        const carousel = document.getElementById('menu-carousel');
        if (!carousel) return;
        
        // Find the embla API on the carousel element
        // This might be attached to a different element depending on the exact structure
        const emblaNodes = document.querySelectorAll('[data-embla-api]');
        const emblaApi = Array.from(emblaNodes).map(node => node.__emblaApi__).find(api => api);
        
        if (emblaApi && typeof emblaApi.scrollTo === 'function') {
          emblaApi.scrollTo(e.detail.slideIndex, true);
        }
      });
    }, 500); // Give React time to hydrate the component
  });
</script>

<style>
  /* Configuration variables */
  :root {
    /* Angle positions for each item - restore original values */
    --angle-item1: 210deg;
    --angle-item2: 225deg;
    --angle-item3: 270deg;
    --angle-item4: 315deg;
    --angle-item5: 330deg;
    
    /* Distance for each item */
    --distance-item1: 140px;
    --distance-item2: 160px;
    --distance-item3: 150px;
    --distance-item4: 160px;
    --distance-item5: 140px;
    
    /* Animation timing */
    --delay-item1: 0s;
    --delay-item2: 0.05s;
    --delay-item3: 0.1s;
    --delay-item4: 0.15s;
    --delay-item5: 0.2s;
    
    /* Hover scale effect - increased by 0.05 */
    --hover-scale: 1.075;
    
    /* Button rotation axis - default is center */
    --button-origin-x: 50%;
    --button-origin-y: 40%;
  }
  
  /* Font loading */
  @font-face {
    font-family: "nord-regular";
    src: url("/fonts/nord-regular.woff2") format("woff2"),
         url("/fonts/nord-regular.woff") format("woff"),
          url("/fonts/nord-regular.ttf") format("truetype");
    font-weight: 400;
    font-style: normal;
    font-display: swap;
  }
  
  /* Button active state */
  #radial-menu-toggle.active {
    background-color: transparent;
    /* transform: scale(0.9) translateY(5%); */
    z-index: 1;
    /* opacity: 0.9; */
    /* box-shadow: 0 0 20px rgba(255, 255, 255, 0.3); */
    transition: all 0.3s ease-in-out;
    transform-origin: var(--button-origin-x) var(--button-origin-y);
  }

  /* Apply transform-origin to the button for rotation */
  #radial-menu-toggle {
    transform-origin: var(--button-origin-x) var(--button-origin-y);
  }
  
  /* Apply transform-origin to icons for proper rotation */
  #default-icon, #pointer-icon {
    transition: opacity 0.3s ease-in-out;
    transform-origin: var(--button-origin-x) var(--button-origin-y);
  }
  
  /* Radial menu container */
  .radial-menu {
    position: absolute;
    width: 100%;
    height: 200px;
    bottom: -50px; /* Position above the button */
    left: 0;
    right: 0;
    pointer-events: none;
  }
  
  /* Menu items base style - now buttons instead of links */
  .radial-menu-item {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%) scale(0);
    background: transparent;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 400;
    font-size: 16px;
    z-index: 40;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease-in-out;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    white-space: nowrap;
    letter-spacing: 0.05em;
    border: none;
    cursor: pointer;
    padding: 8px 12px;
  }
  
  /* Apply NORD font to menu items */
  .nord-font {
    font-family: "nord-regular", sans-serif;
    font-weight: 400;
    font-style: normal;
    text-transform: uppercase;
  }
  
  /* Radial positions for menu items */
  .radial-menu-item.expanded {
    opacity: 1;
    pointer-events: auto;
    transform: translateX(-50%) translate(var(--x), var(--y)) scale(1);
  }
  
  /* Arc above the button - perfectly centered */
  .item-1 {
    --angle: var(--angle-item1);
    --distance: var(--distance-item1);
    --x: calc(cos(var(--angle)) * var(--distance));
    --y: calc(sin(var(--angle)) * var(--distance));
    transition-delay: var(--delay-item1);
  }
  
  .item-2 {
    --angle: var(--angle-item2);
    --distance: var(--distance-item2);
    --x: calc(cos(var(--angle)) * var(--distance));
    --y: calc(sin(var(--angle)) * var(--distance));
    transition-delay: var(--delay-item2);
  }
  
  .item-3 {
    --angle: var(--angle-item3);
    --distance: var(--distance-item3);
    --x: calc(cos(var(--angle)) * var(--distance));
    --y: calc(sin(var(--angle)) * var(--distance));
    transition-delay: var(--delay-item3);
  }
  
  .item-4 {
    --angle: var(--angle-item4);
    --distance: var(--distance-item4);
    --x: calc(cos(var(--angle)) * var(--distance));
    --y: calc(sin(var(--angle)) * var(--distance));
    transition-delay: var(--delay-item4);
  }
  
  .item-5 {
    --angle: var(--angle-item5);
    --distance: var(--distance-item5);
    --x: calc(cos(var(--angle)) * var(--distance));
    --y: calc(sin(var(--angle)) * var(--distance));
    transition-delay: var(--delay-item5);
  }
  
  /* Hover effect - subtle scale for text-only items */
  .radial-menu-item:hover,
  .radial-menu-item.item-active {
    transform: translateX(-50%) translate(var(--x), var(--y)) scale(var(--hover-scale));
    color: rgba(255, 255, 255, 0.95);
    transition-delay: 0s !important; /* Remove delay on hover */
  }
  
  /* Remove delay when toggling off the menu */
  .radial-menu-item:not(.expanded) {
    transition-delay: 0s !important;
  }
</style>
