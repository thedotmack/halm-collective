---
const pillars = [
  {
    title: "HALM COLLECTIVE",
    description: "Where time slows down and transformation begins. A sanctuary hidden in plain sight.",
    color: "#533E28",
    image: "/images/placeholders/pillar-1.jpg"
  },
  {
    title: "WELLNESS",
    description: "Movement that whispers to your body's deeper wisdom. Private 1:1 sessions that redefine your limits.",
    color: "#2B3A0C",
    image: "/images/placeholders/pillar-2.jpg"
  },
  {
    title: "CAFÉ",
    description: "Culinary alchemy that nourishes both body and conversation. Moments savored, never rushed.",
    color: "#3C6E8B",
    image: "/images/placeholders/pillar-3.jpg"
  },
  {
    title: "COMMUNITY",
    description: "Where strangers become confidants and shared intentions create a tapestry of belonging.",
    color: "#5B662E",
    image: "/images/placeholders/pillar-4.jpg"
  }
];
---

<section 
  id="pillars" 
  class="fullpage-section transition-colors duration-500"
  style={`background-color: ${pillars[0].color};`}
>
  <!-- Background Logo -->
  <div class="absolute inset-0 flex items-center justify-center pointer-events-none">
    <svg 
      width="min(70vw, 700px)" 
      height="min(70vh, 500px)" 
      viewBox="0 0 230 170" 
      fill="white" 
      class="opacity-10"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M0 0H231V45H142V67H200V104H142V127H231V171H0V127H88V104H31V67H88V45H0V0Z" />
    </svg>
  </div>
  
  <!-- Content Container -->
  <div class="relative z-10 h-full w-full flex items-center justify-center px-6">
    <div class="w-full max-w-lg">
      <!-- Pillar Cards -->
      <div id="pillar-cards" class="w-full relative">
        {pillars.map((pillar, index) => (
          <div 
            class={`pillar-card w-full transition-all duration-500 ${index === 0 ? 'opacity-100 translate-y-0' : 'opacity-0 absolute top-0 left-0 right-0 translate-y-4'}`}
            data-index={index}
            data-color={pillar.color}
          >
            <div class="rounded-sm p-6">
              <div 
                class="w-full h-52 bg-cover bg-center rounded-sm mb-6"
                style={`background-image: url('${pillar.image}');`}
              ></div>
              
              <h2 class="text-2xl font-light tracking-wider mb-4">{pillar.title}</h2>
              <p class="text-base text-gray-100 mb-6">{pillar.description}</p>
              
              <a href="#" class="group inline-flex items-center text-sm hover:text-white">
                <span>Learn more</span>
                <span class="ml-2 transition-transform group-hover:translate-x-1">→</span>
              </a>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Navigation Controls -->
      <div class="flex items-center justify-between mt-8">
        <button 
          id="prev-pillar"
          class="w-12 h-12 flex items-center justify-center bg-black/20 backdrop-blur-sm rounded-full transition-colors hover:bg-black/40"
          aria-label="Previous pillar"
        >
          <span class="text-2xl">←</span>
        </button>
        
        <!-- Indicator Dots -->
        <div class="flex space-x-3">
          {pillars.map((_, index) => (
            <button
              class={`pillar-dot w-3 h-3 rounded-full transition-colors ${index === 0 ? 'bg-white' : 'bg-white/40'}`}
              data-index={index}
              aria-label={`View pillar ${index + 1}`}
            ></button>
          ))}
        </div>
        
        <button 
          id="next-pillar"
          class="w-12 h-12 flex items-center justify-center bg-black/20 backdrop-blur-sm rounded-full transition-colors hover:bg-black/40"
          aria-label="Next pillar"
        >
          <span class="text-2xl">→</span>
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.getElementById('pillars');
    const cards = document.querySelectorAll('.pillar-card');
    const dots = document.querySelectorAll('.pillar-dot');
    const prevBtn = document.getElementById('prev-pillar');
    const nextBtn = document.getElementById('next-pillar');
    
    let currentIndex = 0;
    const totalCards = cards.length;
    
    function updateActiveCard(index) {
      // Update background color
      const newColor = cards[index].getAttribute('data-color');
      if (section) {
        section.style.backgroundColor = newColor;
      }
      
      // Update cards
      cards.forEach((card, i) => {
        if (i === index) {
          card.classList.remove('opacity-0', 'translate-y-4');
          card.classList.add('opacity-100', 'translate-y-0');
          card.style.zIndex = "1";
        } else {
          card.classList.remove('opacity-100', 'translate-y-0');
          card.classList.add('opacity-0', 'translate-y-4');
          card.style.zIndex = "0";
        }
      });
      
      // Update dots
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.remove('bg-white/40');
          dot.classList.add('bg-white');
        } else {
          dot.classList.remove('bg-white');
          dot.classList.add('bg-white/40');
        }
      });
      
      currentIndex = index;
    }
    
    // Set up navigation
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        const newIndex = (currentIndex - 1 + totalCards) % totalCards;
        updateActiveCard(newIndex);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        const newIndex = (currentIndex + 1) % totalCards;
        updateActiveCard(newIndex);
      });
    }
    
    // Set up dots
    dots.forEach((dot, i) => {
      dot.addEventListener('click', () => {
        updateActiveCard(i);
      });
    });
    
    // Touch swipe support
    let touchStartX = 0;
    
    if (section) {
      section.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      
      section.addEventListener('touchend', (e) => {
        const touchEndX = e.changedTouches[0].screenX;
        const diff = touchStartX - touchEndX;
        
        if (Math.abs(diff) > 50) {
          if (diff > 0) {
            // Swipe left - next
            const newIndex = (currentIndex + 1) % totalCards;
            updateActiveCard(newIndex);
          } else {
            // Swipe right - previous
            const newIndex = (currentIndex - 1 + totalCards) % totalCards;
            updateActiveCard(newIndex);
          }
        }
      });
    }
  });
</script>